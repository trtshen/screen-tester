name: Test Coverage

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const coverageText = fs.readFileSync('./coverage/lcov.info', 'utf8');
            const lines = coverageText.split('\n');
            
            let totalLines = 0;
            let coveredLines = 0;
            let totalFunctions = 0;
            let coveredFunctions = 0;
            let totalBranches = 0;
            let coveredBranches = 0;
            
            for (const line of lines) {
              if (line.startsWith('LF:')) totalLines += parseInt(line.split(':')[1]);
              if (line.startsWith('LH:')) coveredLines += parseInt(line.split(':')[1]);
              if (line.startsWith('FNF:')) totalFunctions += parseInt(line.split(':')[1]);
              if (line.startsWith('FNH:')) coveredFunctions += parseInt(line.split(':')[1]);
              if (line.startsWith('BRF:')) totalBranches += parseInt(line.split(':')[1]);
              if (line.startsWith('BRH:')) coveredBranches += parseInt(line.split(':')[1]);
            }
            
            const linePercentage = totalLines > 0 ? Math.round((coveredLines / totalLines) * 100) : 0;
            const functionPercentage = totalFunctions > 0 ? Math.round((coveredFunctions / totalFunctions) * 100) : 0;
            const branchPercentage = totalBranches > 0 ? Math.round((coveredBranches / totalBranches) * 100) : 0;
            
            const comment = `## ðŸ“Š Test Coverage Report
            
            | Metric | Coverage |
            |--------|----------|
            | Lines | ${linePercentage}% (${coveredLines}/${totalLines}) |
            | Functions | ${functionPercentage}% (${coveredFunctions}/${totalFunctions}) |
            | Branches | ${branchPercentage}% (${coveredBranches}/${totalBranches}) |
            
            Coverage thresholds: Lines â‰¥80%, Functions â‰¥80%, Branches â‰¥80%`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read coverage file or create comment:', error.message);
          }